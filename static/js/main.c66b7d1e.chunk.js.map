{"version":3,"sources":["components/Deck.js","components/Card.js","components/Field.js","App.js","serviceWorker.js","index.js"],"names":["Deck","props","handleClick","bind","max","Math","floor","random","e","index","this","getRandomInt","onDraw","className","src","alt","onClick","Component","Card","card","url","style","display","Field","state","handleDraw","console","log","setState","href","App","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPA0BeA,E,kDAvBX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,YAAc,EAAKA,YAAYC,KAAjB,gBAFJ,E,yDAKNC,GACT,OAAOC,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMF,M,kCAGrCI,GACR,IAAIC,EAAQC,KAAKC,aAAa,IAAM,EACpCD,KAAKT,MAAMW,OAAOH,K,+BAIlB,OACI,yBAAKI,UAAU,qBACX,yBAAKC,IAAI,iCAAiCC,IAAI,qBAAqBC,QAASN,KAAKR,mB,GAlB9Ee,aCmBJC,E,uKAjBP,IAAIC,EAEJ,GAAIT,KAAKT,MAAMkB,KAAK,CAChB,IAAIC,EAAM,oDAAsDV,KAAKT,MAAMkB,KAAO,OAClFA,EAAO,yBAAKL,IAAKM,EAAKL,IAAI,qBAAqBM,MAAO,CAAEC,QAASZ,KAAKT,MAAMkB,KAAO,QAAS,eAE5FA,EAAO,kEAGX,OACI,yBAAKN,UAAU,qBACVM,O,GAbEF,aCyCJM,E,kDAtCX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IACDuB,MAAQ,CAACL,KAAM,MACpB,EAAKM,WAAa,EAAKA,WAAWtB,KAAhB,gBAHH,E,uDAMRgB,GACPO,QAAQC,IAAI,yBACZjB,KAAKkB,UAAS,SAAAJ,GAAK,MAAK,CACpBL,KAAMA,Q,+BAKV,IAAMA,EAAOT,KAAKc,MAAML,KAExB,OACI,yBAAKN,UAAU,SACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACf,yBAAKA,UAAU,SACX,kBAAC,EAAD,CAAMD,OAAQF,KAAKe,cAEvB,yBAAKZ,UAAU,SACX,kBAAC,EAAD,CAAMM,KAAMA,KAEhB,yBAAKN,UAAU,WAEnB,yBAAKA,UAAU,gBACX,qKAA0I,uBAAGgB,KAAK,6BAAR,8B,GA/B9IZ,aCyBLa,MAzBf,WACE,OACE,yBAAKjB,UAAU,OACX,gCACI,4BACI,uBAAGgB,KAAK,6BAAR,uBAEJ,yBAAKhB,UAAU,QACX,uBAAGgB,KAAK,6BAA4B,yBAAKf,IAAI,4BAA4BC,IAAI,UAGrF,yJAGA,kBAAC,EAAD,MACA,gCACI,uBAAGgB,IAAI,UAAUF,KAAK,qDAClB,yBAAKd,IAAI,2BAA2BD,IAAI,4DACxC,6BAHR,iCAIkC,uBAAGiB,IAAI,UAAUF,KAAK,qDAAtB,mFAJlC,OCPYG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,a","file":"static/js/main.c66b7d1e.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Deck extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleClick = this.handleClick.bind(this);\r\n    }\r\n\r\n    getRandomInt(max) {\r\n        return Math.floor(Math.random() * Math.floor(max));\r\n    }\r\n\r\n    handleClick(e) {\r\n        let index = this.getRandomInt(55) + 1;\r\n        this.props.onDraw(index);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Deck card-display\">\r\n                <img src=\"/resources/images/cardback.png\" alt=\"cardback-component\" onClick={this.handleClick}/>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Deck;","import React, { Component } from 'react';\r\n\r\nclass Card extends Component {\r\n    render() {\r\n        let card;\r\n\r\n        if (this.props.card){\r\n            let url = \"/resources/images/CTTH v4 Prod Cards layout final\" + this.props.card + \".png\";\r\n            card = <img src={url} alt=\"cardback-component\" style={{ display: this.props.card ? 'block': 'none'}}/>;\r\n        } else {\r\n            card = <div>Click on the deck to draw a card!</div>\r\n        }\r\n\r\n        return (\r\n            <div className=\"Card card-display\">\r\n                {card}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Card;","import React, { Component } from 'react';\r\nimport Deck from \"./Deck\";\r\nimport Card from \"./Card\";\r\n\r\nclass Field extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {card: null};\r\n        this.handleDraw = this.handleDraw.bind(this);\r\n    }\r\n\r\n    handleDraw(card) {\r\n        console.log('The link was clicked.');\r\n        this.setState(state => ({\r\n            card: card\r\n        }));\r\n    }\r\n\r\n    render() {\r\n        const card = this.state.card;\r\n\r\n        return (\r\n            <div className=\"Field\">\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col-2\"/>\r\n                        <div className=\"col-4\">\r\n                            <Deck onDraw={this.handleDraw}/>\r\n                        </div>\r\n                        <div className=\"col-4\">\r\n                            <Card card={card}/>\r\n                        </div>\r\n                        <div className=\"col-2\"/>\r\n                    </div>\r\n                    <div className=\"row find-out\">\r\n                        <span>Find out more about Cards to the Heart, download your own copy, or help support this art project by buying your own printed deck at <a href=\"http://cardstotheheart.ca\">cardstotheheart.ca</a></span>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Field;","import React from 'react';\r\nimport './styles/components/App.scss';\r\nimport Field from \"./components/Field\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n        <header>\r\n            <h1>\r\n                <a href=\"http://cardstotheheart.ca\">Cards to the Heart</a>\r\n            </h1>\r\n            <div className=\"logo\">\r\n                <a href=\"http://cardstotheheart.ca\"><img src=\"/resources/C2tH_logo1.png\" alt=\"<3\" /></a>\r\n            </div>\r\n        </header>\r\n        <span>\r\n                In this time of physical isolation, please use these questions to help you stay socially connected with your loved ones\r\n        </span>\r\n        <Field/>\r\n        <footer>\r\n            <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\r\n                <img alt=\"Creative Commons License\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\r\n            </a><br />\r\n            This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\r\n        </footer>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n//todo: flexbox for vertical pos?\r\n//todo: get text in a file and grab randomly","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './main.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}