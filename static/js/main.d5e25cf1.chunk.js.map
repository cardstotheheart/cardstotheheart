{"version":3,"sources":["components/Deck.js","components/Card.js","components/Field.js","App.js","serviceWorker.js","index.js"],"names":["Deck","props","handleClick","bind","nextCard","shuffle","numCards","cardIndex","hugCard","skipCards","deckOrder","i","push","this","length","j","Math","floor","random","includes","e","onDraw","className","src","alt","onClick","Component","Card","card","url","style","display","Field","state","handleDraw","setState","href","App","rel","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d5e25cf1.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Deck extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick = this.handleClick.bind(this);\n        this.nextCard = this.nextCard.bind(this);\n        this.shuffle = this.shuffle.bind(this);\n\n        this.numCards = 55;\n        this.cardIndex = -1;\n\n        this.hugCard = 13;\n        this.skipCards = [this.hugCard];\n        this.deckOrder = [];\n\n        for (let i = 1; i <= this.numCards; i++){\n            this.deckOrder.push(i);\n        }\n\n        this.shuffle();\n    }\n\n    shuffle() {\n        for (let i = this.deckOrder.length - 1; i > 0; i--) {\n            let j = Math.floor(Math.random() * (i + 1));\n            [this.deckOrder[i], this.deckOrder[j]] = [this.deckOrder[j], this.deckOrder[i]];\n        }\n    }\n\n    nextCard() {\n        this.cardIndex++;\n        if (this.skipCards.includes(this.deckOrder[this.cardIndex])){\n            this.cardIndex++;\n        }\n    }\n\n    handleClick(e) {\n        this.nextCard();\n\n        if (this.cardIndex > this.numCards){\n            this.shuffle();\n            this.cardIndex = -1;\n            this.nextCard();\n        }\n\n        this.props.onDraw(this.deckOrder[this.cardIndex]);\n    }\n\n    render() {\n        return (\n            <div className=\"Deck card-display\">\n                <img src=\"/resources/images/cardback.png\" alt=\"cardback-component\" onClick={this.handleClick}/>\n            </div>\n        );\n    }\n}\n\nexport default Deck;","import React, { Component } from 'react';\n\nclass Card extends Component {\n    render() {\n        let card;\n\n        if (this.props.card){\n            let url = \"/resources/images/cards/CTTH v4 Prod Cards layout final\" + this.props.card + \".png\";\n            card = <img src={url} alt=\"cardback-component\" style={{ display: this.props.card ? 'block': 'none'}}/>;\n        } else {\n            card = <div>Click on the deck to shuffle and draw a card!</div>\n        }\n\n        return (\n            <div className=\"Card card-display\">\n                {card}\n            </div>\n        );\n    }\n}\n\nexport default Card;","import React, { Component } from 'react';\nimport Deck from \"./Deck\";\nimport Card from \"./Card\";\n\nclass Field extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {card: null};\n        this.handleDraw = this.handleDraw.bind(this);\n    }\n\n    handleDraw(card) {\n        this.setState(state => ({\n            card: card\n        }));\n    }\n\n    render() {\n        const card = this.state.card;\n\n        return (\n            <div className=\"Field\">\n                <div className=\"container\">\n                    <div className=\"row\">\n                        <div className=\"col-2\"/>\n                        <div className=\"col-4\">\n                            <Deck onDraw={this.handleDraw}/>\n                        </div>\n                        <div className=\"col-4\">\n                            <Card card={card}/>\n                        </div>\n                        <div className=\"col-2\"/>\n                    </div>\n                    <div className=\"row find-out\">\n                        <span>Find out more about Cards to the Heart, download your own copy, or help support this art project by buying your own printed deck at <a href=\"http://cardstotheheart.ca\">cardstotheheart.ca</a></span>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Field;","import React from 'react';\nimport './styles/components/App.scss';\nimport Field from \"./components/Field\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <header>\n            <h1>\n                <a href=\"http://cardstotheheart.ca\">Cards to the Heart</a>\n            </h1>\n            <div className=\"logo\">\n                <a href=\"http://cardstotheheart.ca\"><img src=\"/resources/images/C2tH_logo1.png\" alt=\"<3\" /></a>\n            </div>\n        </header>\n        <span>\n                In this time of physical isolation, please use these questions to help you stay socially connected with your loved ones\n        </span>\n        <Field/>\n        <footer>\n            <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">\n                <img alt=\"Creative Commons License\" src=\"https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png\" />\n            </a><br />\n            This work is licensed under a <a rel=\"license\" href=\"http://creativecommons.org/licenses/by-nc-sa/4.0/\">Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License</a>.\n        </footer>\n    </div>\n  );\n}\n\nexport default App;\n\n//todo: flexbox for vertical pos?\n//todo: get text in a file and grab randomly","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './main.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}